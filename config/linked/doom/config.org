#+TITLE: My configuration
#+date: 2021-7-19
#+STARTUP: content
* Introduction
This is my literate configuration for doom emacs. I barley know [[https://learnxinyminutes.com/docs/elisp/][elisp]]  and I have
mostly stolen snippets from others. This config is [[elisp:(call-interactively #'count-words)][this many]] words, lines and
characters long. Its a lot of blood sweat and tears so I hope you like it as much
as I tolerate it!

#+begin_quote
Do note I don't try to explain how things work but I do try to explain my
motivation behind my config. I was told this is not the norm but this is my
config and =C-h f= exists so you can go have a look
#+end_quote

Lets get this config started!
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Don't edit this file directly unless you like your changes being wiped
#+END_SRC

** Table of Contents :TOC_3:
- [[#introduction][Introduction]]
- [[#rudimentary-configuration][Rudimentary configuration]]
  - [[#keybinds][Keybinds]]
  - [[#hooky-hooks][Hooky hooks]]
  - [[#funky-functions][funky functions]]
  - [[#random-modes][Random modes]]
    - [[#type-break-mode][Type break mode]]
- [[#packages][Packages]]
  - [[#language-packages][Language packages]]
    - [[#caddy][Caddy]]
    - [[#vim][vim]]
    - [[#unit-tests][unit tests]]
    - [[#emacs-lisp-editions][Emacs lisp editions]]
    - [[#org-mode][org mode]]
  - [[#hugo-support][Hugo support]]
  - [[#modeline-fun][modeline fun]]
  - [[#evil-tutor][Evil tutor]]
  - [[#dired-drag-and-drop][dired drag and drop]]
  - [[#themes][themes]]
  - [[#discord-rich-presence][discord rich presence]]
  - [[#tldr-integration][tldr integration]]
  - [[#atomic-chrome][atomic chrome]]
  - [[#hacker-news][Hacker news]]
  - [[#emacs-webkit][emacs webkit]]
  - [[#pretty-code-shots][pretty code shots]]
  - [[#matrix][matrix]]
  - [[#keycast][keycast]]
  - [[#power-mode][Power mode]]
  - [[#selectric-mode][selectric-mode]]
  - [[#games][Games]]
  - [[#sidebars][Sidebars]]
    - [[#dired-sidebar][Dired sidebar]]
    - [[#ibuffer-sidebar][Ibuffer sidebar]]
    - [[#org-sidebar][Org Sidebar]]
  - [[#elfeed][elfeed]]
- [[#modules][Modules]]
  - [[#completion][completion]]
    - [[#company][company]]
    - [[#deprecated-ivy][DEPRECATED ivy]]
    - [[#vertico][vertico]]
  - [[#editor][editor]]
    - [[#evil][evil]]
  - [[#ui][ui]]
    - [[#doom][Doom]]
    - [[#doom-dashboard][Doom Dashboard]]
    - [[#modeline][Modeline]]
    - [[#treemacs][Treemacs]]
    - [[#workspaces][Workspaces]]
  - [[#tools][tools]]
    - [[#eval][eval]]
    - [[#lsp][lsp]]
    - [[#pdf][pdf]]
    - [[#tmux][tmux]]
  - [[#emacs][emacs]]
    - [[#dired][dired]]
  - [[#term][term]]
    - [[#eshell][eshell]]
  - [[#checkers][checkers]]
    - [[#spell][spell]]
  - [[#lang][lang]]
    - [[#org][Org]]
    - [[#deprecated-go][DEPRECATED Go]]
    - [[#haskell][haskell]]
    - [[#python][Python]]
    - [[#latex][LaTeX]]
    - [[#web][Web]]
  - [[#email][email]]
    - [[#mu4e][mu4e]]
  - [[#app][App]]
    - [[#irc][irc]]
    - [[#rss][rss]]
    - [[#everywhere][everywhere]]
- [[#epilogue][Epilogue]]

* Rudimentary configuration
This is the stuff that does not really belong in any module but is useful
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeetaditya Chatterjee"
      user-mail-address "jeetelongname@gmail.com" ;; god I can't wait to get away from gmail
      doom-scratch-initial-major-mode 'lisp-interaction-mode
      auth-sources '("~/.authinfo.gpg")
      ispell-dictionary "en"
      display-line-numbers-type 'relative ;; this is a reminder that I should try and use relative actions more
      browse-url-browser-function 'browse-url-firefox)

(when (boundp 'native-comp-async-jobs-number)
  (setq native-comp-async-jobs-number 9))
#+END_SRC

I like a little separation so I put an empty line at the top of my emacs
instance (I may put something in it later)
#+BEGIN_SRC emacs-lisp
(setq-default header-line-format
        (concat (propertize " " 'display '((space :align-to 0))) " "))
#+END_SRC

** Keybinds
These are my global keybinds they should not belong to any module. thus they
get stuck here
#+BEGIN_SRC emacs-lisp
(map!
 :n "z C-w" 'save-buffer ; I can use this onehanded which is nice when I need to leave or eat or something
 :leader
 :desc "Enable Coloured Values""t c" #'rainbow-mode
 :desc "Toggle Tabs""t B" #'centaur-tabs-local-mode
 :desc "Open Elfeed""o l" #'elfeed
 ;; I recompile more than I compile
 "cc" #'recompile
 "cC" #'compile)
#+end_src
** Hooky hooks
hl-line and rainbow mode don't play all too well so if one is on the other
should be off
#+begin_src emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
;; this snippet can be replaced with `(after! magit (setq magit-save-repository-buffers t))'
;; (after! magit (add-hook! 'magit-status-mode-hook :append (call-interactively #'save-some-buffers)))
#+end_src

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
** funky functions
Because this is a literate config I can't re evaluate the buffer using
~eval-buffer~ (bound to =SPC m e b=) so I reload the file after its tangled (usually
on save)
(=m e b= becomes =h r c=)
#+BEGIN_SRC emacs-lisp :tangle autoload.el
;;;###autoload
(defun yeet/reload ()
  "A simple cmd to make reloading my config easier"
  (interactive)
  (load! "config" doom-private-dir)
  (message "Reloaded!"))
#+END_SRC

#+begin_src emacs-lisp
(map! :leader
      "h r c" #'yeet/reload)
#+end_src
some how this function is run on startup? not that I am complaining
#+BEGIN_SRC emacs-lisp :tangle autoload.el
;;;###autoload
(defun henlo ()
  "henlo."
  (interactive)
  (message "henlo"))

(henlo) ;; oh wait thats how

#+END_SRC

I don't have a problem ok I can =M-x stop= at any time
#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun stop ()
  (interactive)
  (let ((name "*I can quit at any time*"))
    (switch-to-buffer (get-buffer-create name))
    (insert "I can stop at any time\nI am in control")))
#+end_src

thewe awe days whewe i nyeed to quickwy u-uwu a wawge a-amount of text w-wight in emacs
o-onwy wowks on an e-expwicit sewection a-at the moment [[https://github.com/Daniel-Liu-c0deb0t/uwu][this is the pwogwam i
use]] tho it couwd wowk with any uwu pwogwam t-that accepts s-stdin

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun uwu (start end)
  "Uwu the text between START and END."
  (interactive "r")
  (let ((str (buffer-substring-no-properties start end)))
    (goto-char start)
    (delete-region start end)
    (insert (format "%s" (shell-command-to-string ;; I have to pipe the text into uwuify unless making a temp-file is more your style
                          (concat "echo "
                                  "'" str "'"
                                  " | " (executable-find "uwuify")))))))
#+end_src

This snippet toggles between a vertical and horizontal window. Like most things
I did not write this I took it from [[https://www.emacswiki.org/emacs/ToggleWindowSplit][here]]
#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      "w C-t" nil
      "w C-t" #'toggle-window-split)
#+end_src
** COMMENT macros
#+begin_src emacs-lisp
(defmacro add-many-to-lists (list-sym &rest lists)
     (dolist (elm (list ,@lists))
       (push elm ,list-sym)))
#+end_src

#+begin_src emacs-lisp

;; (let ((lst '(1 2)))
;;   (add-many-to-lists
;;    lst
;;    '(1 2 3)
;;    '(2 3 4)
;;    '(4 5 6)))
#+end_src

#+RESULTS:

** Random modes
*** TODO Type break mode
Type break reminds you too take a break once a certain threshold of keys has
been met. Its nice if its not too frequent
#+begin_src emacs-lisp
(use-package! type-break
  :defer
  :config
  (setq type-break-interval 1800 ;; half an hour between type breaks
        type-break-keystroke-threshold (cons 2000  14000))
  (type-break-mode 1))
#+end_src

* Packages
I have quite a few packages that I use. These are the packages and there
subsequent configurations
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC
** Language packages :lang:
*** Caddy
Caddy is a webserver with its own file format
#+begin_src emacs-lisp :tangle packages.el
(package! caddyfile-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! caddyfile-mode
  :mode (("Caddyfile\\'" . caddyfile-mode)
         ("caddy\\.conf\\'" . caddyfile-mode)))
#+end_src
*** TODO vim
because sacrilege is fun
(this is mostly a mental exercise but it does work...) I can (alleged) also get lsp
support as well so this may be a fun project to take on
#+begin_src emacs-lisp :tangle packages.el
(package! vimrc-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! vimrc-mode
  :mode "\\.vim$\\'"
  :config)
;; (sp-local-pair 'vimrc-mode "\"" nil :actions :rem))
#+end_src
*** TODO unit tests
While I am in fact an incompetent programmer I do enjoy the sysiphisan task of
writing tests +thanks in no small part to the ease that cucumber makes it+
I was so ready to use it but it did not want too work with my ruby project :(

#+begin_src emacs-lisp :tangle packages.el
(package! feature-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! feature-mode
  :mode "\.feature$")
#+end_src
*** Emacs lisp editions :emacsLisp:
this adds a sybilance of a namespace in elisp
#+begin_src emacs-lisp :tangle packages.el
(package! nameless)
#+end_src

#+begin_src emacs-lisp
(use-package! nameless
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook #'nameless-mode)
  (setq nameless-global-aliases '(("d" . "doom"))
        nameless-private-prefix t))
#+end_src
*** COMMENT Brainfuck

#+begin_src emacs-lisp :tangle packages.el
(package! brainfuck-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! brainfuck-mode
  :mode "\\.bf$\\'")
#+end_src
*** org mode :org:
#+begin_src emacs-lisp :tangle packages.el
(package! company-org-block)
#+end_src

#+begin_src emacs-lisp
(use-package! company-org-block
  :after org
  :config
  (setq company-org-block-edit-style 'auto))

(after! org
  (set-company-backend! 'org-mode-hook '(company-org-block company-capf))

  ;; (setq org-babel-load-languages
  ;;       '((elisp   . t)
  ;;         (python  . t)
  ;;         (ruby    . t)
  ;;         (haskell . t)
  ;;         (scheme  . t)
  ;;         (latex   . t)))
  )
#+end_src
** Hugo support
I blog! [[https://jeetelongname.github.io/blog][Sometimes.. When I can.. Not really]]
This is mostly just for the time stamp but it does come in handy
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! emacs-easy-hugo
  :recipe (:host github
           :repo "masasam/emacs-easy-hugo"
           :files ("*el")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (setq easy-hugo-basedir "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/")
(use-package! emacs-easy-hugo
  :after markdown
  :config
  (setq easy-hugo-root "~/code/git-repos/mine/jeetelongname.github.io/blog-hugo/"))
#+END_SRC
** modeline fun :modeline:
/whats life without a little colour?/
#+begin_src emacs-lisp :tangle packages.el
(package! nyan-mode)
(package! parrot)
#+end_src

#+begin_src emacs-lisp
(defvar birds '(default confused emacs nyan rotating science thumbsup))

(use-package! nyan-mode
  :defer t
  :config
  (setq nyan-bar-length 15
        nyan-wavy-trail t))

(use-package! parrot
  :defer t
  :config
  (parrot-set-parrot-type (nth (random (length birds)) birds))) ;; this chooses a random bird on startup


(after! doom-modeline
  (nyan-mode)
  (nyan-start-animation)
  (parrot-mode)
  (parrot-start-animation))

;; (add-to-list 'marginalia-prompt-categories '("bird" . bird))

(defun bird-annotations (cand)
  "Takes a CANDidate (which is a bird) and returns a description of said bird"
  (let ((birds+annotations (-zip-pairs birds '("default bird is best bird"
                                          "they have got the spirit"
                                          "EMACS BIRD EMACS BIRD"
                                          "nananananan"
                                          "you spin me right round right round like a record baby"
                                          "science bitch!"
                                          "He is just happy to be here"))))
    (cdr (assoc cand birds+annotations))))

;; (add-to-list 'marginalia-annotator-registry '(bird bird-annotations))

#+end_src

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun yeet/select-bird (bird)
  "Select BIRD from birds"
  (interactive (list (completing-read "Select bird: " birds)))
  (parrot-set-parrot-type bird))
#+end_src
** Evil tutor :evil:
I wanted to see the differences with its vim counterparts (its a litle nicer)
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! evil-tutor)
#+END_SRC
** dired drag and drop :dired:
I want drag and drop so I just wrapped dragon in elisp the drag commands work
wellish
#+begin_src emacs-lisp :tangle packages.el
;; (package! dired-dragon :recipe (:local-repo "~/code/elisp/dired-dragon"))
(package! dired-dragon :recipe (:host github :repo "jeetelongname/dired-dragon"))
#+end_src
#+begin_src emacs-lisp
(use-package! dired-dragon
  :after dired
  :config
  (map! :map dired-mode-map
        (:prefix "C-s"
         :n "d" #'dired-dragon
         :n "s" #'dired-dragon-stay
         :n "i" #'dired-dragon-individual)))
#+end_src

** themes :doom:
this was for a terminal  experiment that did not work
#+begin_src emacs-lisp :tangle packages.el
(package! horizon-theme)
(unpin! doom-themes)
(package! tao-theme)
#+end_src

** discord rich presence
Why use emacs when you can't tell everyone your using emacs?
I am now using elcord because.. peer pressure? I don't know but the config is
nice
#+begin_src emacs-lisp :tangle packages.el
(package! elcord)
#+end_src
I use non daemon sessions for testing I would much rather it would not be used
(and block the closing of emacs)

#+begin_src emacs-lisp
(when (daemonp)
  (use-package! elcord
    :config
    (quiet! (elcord-mode +1)))) ;; elcord is a noisy bitch. I don't need all of the output
#+end_src

#+RESULTS:
: t

** tldr integration
Ever wanted to.. not read a man page? me too. tldr is a good middle ground between
a lot of useless information and .. no information. Now in emacs!
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! tldr)
#+END_SRC

#+begin_src emacs-lisp
(use-package! tldr
  :config
  (setq tldr-directory-path (expand-file-name "tldr/" doom-etc-dir)) ;; don't be cluttering my work tree
  (setq tldr-enabled-categories '("common" "linux")))
#+end_src
** atomic chrome
#+begin_src emacs-lisp :tangle packages.el
(package! atomic-chrome)
#+end_src
When writing a lot of markdown on github this helps (now all I need to do is get the
button on a keybind in my browser)
#+begin_src emacs-lisp
(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-buffer-open-style 'frame
        atomic-chrome-default-major-mode 'markdown-mode
        atomic-chrome-url-major-mode-alist
        '(("github.\\.com" . gfm-mode)
          ("reddit\\.com" . fundamental-mode)))

  (atomic-chrome-start-server))
#+end_src
** Hacker news
I am a hacker.. I like news (sometimes) Now in emacs!
#+begin_src emacs-lisp :tangle packages.el
(package! hackernews)
#+end_src

#+begin_src emacs-lisp
(use-package! hackernews :defer t)
#+end_src

** COMMENT DEPRECATED emacs application framework
#+begin_quote
EAF does not work with pgtk. due to reasons I don't understand [[https://github.com/manateelazycat/emacs-application-framework/issues/449][check out this
issue for more info]]
I will be moving to emacs webkit because /I need my emacs browser/
#+end_quote

eaf is an application framework for writing pyqt applications in emacs. Its
really cool!
https://github.com/MatthewZMD/.emacs.d#orgad36696 this is a config I need to revisit
You need a few dependencies for this to work. I don't recommend installing from
pip as it can be buggy

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! eaf :recipe
  (:host github
   :repo "manateelazycat/emacs-application-framework"
   :files ("*")
   :build (:not compile)))

(package! epc)
(package! ctable)
(package! deferred)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package! eaf
  :defer t
  :init
  (use-package! epc :defer t)
  (use-package! ctable :defer t)
  (use-package! deferred :defer t)
  (use-package! s :defer t)
  :config
  (setq eaf-enable-debug t) ; should only be used when eaf is wigging out
  (eaf-setq eaf-browser-dark-mode "false") ; dark mode is overrated
  (setq eaf-browser-default-search-engine "duckduckgo")
  (eaf-setq eaf-browse-blank-page-url "https://duckduckgo.com"))

(use-package! eaf-evil ;; evil bindings in my browser
  :after eaf
  :config
  (setq eaf-evil-leader-keymap doom-leader-map)
  (setq eaf-evil-leader-key "spc"))
#+end_src

** TODO emacs webkit
because my emacs addiction is getting worse
#+begin_src emacs-lisp :tangle packages.el
(package! webkit :recipe
  (:host github :repo "akirakyle/emacs-webkit"
   :branch "main"
   :files (:defaults "*")))
#+end_src

** pretty code shots
i missed the ability to make pretty code shots inside vscode now its come back to
me through this package. its pretty cool and works well (it only does one thing)
#+begin_src emacs-lisp :tangle packages.el
(package! carbon-now-sh)
#+end_src

+i wanted to work with these code images directly in emacs so i brought in eaf to+
+help. do note that there is a bug in the pypi version of the qtwebengine that+
+basically segfaults if you open carbon (and probably other sites) if you install
from the repos tho this problem goes away+

I just went back to firefox since eaf is deprecated in my config
#+begin_src emacs-lisp
(use-package! carbon-now-sh
  :config
  (defun yeet/carbon-use-eaf ()
    (interactive)
    (split-window-right)
    (let ((browse-url-browser-function 'browse-url-firefox))
      (browse-url (concat carbon-now-sh-baseurl "?code="
                          (url-hexify-string (carbon-now-sh--region))))))
  (map! :n "g C-c" #'yeet/carbon-use-eaf))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; (package! screenshot. :recipe
;;   (:host github :repo "tecosaur/screenshot"))
#+end_src

#+begin_src emacs-lisp
;; (use-package! screenshot :defer)
#+end_src
** TODO matrix
#+begin_src emacs-lisp :tangle packages.el
;; (package! matrix-client.el :recipe (:host github :repo "alphapapa/matrix-client.el"))
#+end_src

** TODO keycast
I have stolen this from @tecosaur again..
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! keycast)
#+END_SRC
it adds prettier keycast mode support and more stuff that I don't understand. I
also bound it
#+BEGIN_SRC emacs-lisp
(use-package! keycast
  :commands keycast-mode
  :after doom-modeline
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast-mode-line-update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold))
  (map! :leader "tk" #'keycast-mode))
#+END_SRC
** Power mode
#+begin_src emacs-lisp :tangle packages.el
(package! power-mode :recipe (:host github :repo "elizagamedev/power-mode.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! power-mode
  :defer t)

#+end_src

** selectric-mode
I want to annoy people with a loud keyboard without having to carry around a
loud keyboard
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! selectric-mode)
#+END_SRC
** Games
I want to make a module full of fun games and addition's to easter eggs. its there
to document what exists and just add a little more fun to the operating system
we call home
Some games I will probably add
 - https://web.archive.org/web/20070708044037/http://cedet.sourceforge.net/ftp/hangman.el-0.1.gz
 - https://www.emacswiki.org/emacs/CategoryGames
#+begin_src emacs-lisp :tangle packages.el
;; (package! emacs-2048
;;   :recipe (:host github
;;            :repo "sprang/emacs-2048"))

#+end_src
** Sidebars :sidebars:
By virtue of these things I seem to have 3 different sidebars (4 if you include
treemacs) that I have taken a liking to so they get there own sub genre

#+begin_src emacs-lisp
(defun yeet/sidebar-toggle ()
  "toggle both ibuffer and dired sidebars"
  (interactive)
  (ibuffer-sidebar-toggle-sidebar)
  (dired-sidebar-toggle-sidebar))

(map! :leader "o p" nil
      :leader "o p" #'dired-sidebar-toggle-sidebar ;; this is more useful most of the time
      :leader "o P" #'yeet/sidebar-toggle) ;; this is when I need too do some buffer management
#+end_src

*** Dired sidebar
this is a replacement for treemacs. Now don't get me wrong. I like treemacs. Its
great but its /not dired/. This preserves a lot of the dired configuration I could
do and more importantly preserves keys which is nice
#+begin_src emacs-lisp :tangle packages.el
(package! dired-sidebar)
#+end_src

#+begin_src emacs-lisp
;; (after! dired-sidebar (add-hook! 'dired-sidebar-mode-hook (doom-modeline-mode -1)))

(use-package! dired-sidebar
  :defer t
  :commands dired-sidebar-toggle-sidebar
  :config
  (setq dired-sidebar-use-custom-modeline t
        dired-sidebar-should-follow-file t))
#+end_src

*** Ibuffer sidebar
this is the same thing as above made by the same [[https://github.com/jojojames][author]] and it works just like
dired sidebar.. for Ibuffer
#+begin_src emacs-lisp :tangle packages.el
(package! ibuffer-sidebar)
#+end_src

#+begin_src emacs-lisp
(use-package! ibuffer-sidebar
  :commands ibuffer-sidebar-toggle-sidebar
  :defer t)
#+end_src
*** TODO Org Sidebar
this does a bunch of org stuff like break stuff down into headings. there is a
bit of work to be done
#+begin_src emacs-lisp :tangle packages.el
(package! org-sidebar)
#+end_src


#+begin_src emacs-lisp
(use-package! org-sidebar
  :after org)
#+end_src

** COMMENT affe :completion:vertico:
affe adds async fuzzy finding. I need to work on it some more
#+begin_src emacs-lisp :tangle packages.el
(package! affe)
#+end_src

#+begin_src emacs-lisp
(use-package! affe
  :after orderless
  :config
  ;; Configure Orderless
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless-highlight-matches))
#+end_src
** elfeed :app:rss:
I needed elfeed to look a little nicer. so I got elfeed goodies which did the job
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! elfeed-goodies)
(package! elfeed-web)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! elfeed-goodies
  :after elfeed
  :config
  (setq elfeed-goodies/powerline-default-separator 'bar)
  (elfeed-goodies/setup))
#+END_SRC
* Modules
These are the configurations for the doom specific modules. some are big like
mu4e, some are small like dired. some are well sized. They are all loved tho!
(except the deprecated ones.)
** completion :completion:
*** company :company:
Deals with completions something I like. I elect for manual completion but
defer the idle delay for those real brain fart seconds
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 6 ; I like my autocomplete like my tea. Mostly made by me but appreciated when someone else makes it for me
        ;; company-minimum-prefix-length 2
        company-show-numbers t))
#+END_SRC
*** DEPRECATED ivy :ivy:
Ivy is nice but +selectrum+ vertico is my friend
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-height 20
        ivy-wrap nil
        ivy-magic-slash-non-match-action t)
  (add-to-list 'ivy-re-builders-alist '(counsel-projectile-find-file . ivy--regex-plus)))
#+END_SRC

this is to make prescient a little more intelligent
#+BEGIN_SRC emacs-lisp
(setq-default history-length 10000)
(setq-default prescient-history-length 10000)
#+END_SRC
*** vertico :vertico:
**** marginalia
These are some small tweaks to marginalia I will probably add more as its kind
of fun!
#+begin_src emacs-lisp
(defun yeet/face-annotator (cand)
    "Annotate faces with dummy text and face documentation"
    (when-let (sym (intern-soft cand))
      (marginalia--fields
       ("The Quick Brown Fox Jumped Over The Lazy Dog" :face sym)
       ((documentation-property sym 'face-documentation)
        :truncate marginalia-truncate-width :face 'marginalia-documentation))))

(after! marginalia
  (add-to-list 'marginalia-annotator-registry
               '(face yeet/face-annotator marginalia-annotate-face builtin none)))
#+end_src

** editor :editor:
*** evil :evil:
Frankly I don't know why this is not default
(it automatically switches to a split)
#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below  t
      evil-vsplit-window-right t)
#+END_SRC
** ui :ui:
*** Doom :doom:
This is the main module to say what Doom looks like! I put all of my font
settings and all of that fun stuff here

+Inconsolata is the best font that *I* have used... but it does not italic well.+
+if you do know of a better way. do get in touch!+

Iosevka is my new best friend

#+BEGIN_SRC emacs-lisp
(setq! doom-font
       (font-spec :family "Iosevka" :size 16)
       doom-big-font
       (font-spec :family "Iosevka" :size 25)
       doom-variable-pitch-font
       (font-spec :family "Input" :size 17))
#+end_src

the comments for horizon are borderline unreadable so now we have brighter
comments
#+begin_src emacs-lisp
(after! doom-themes
  (setq! doom-themes-enable-bold t
         doom-themes-enable-italic t
         doom-horizon-brighter-comments t
         doom-flatwhite-brighter-modeline t))
#+end_src

I wanted my comments and keywords to be italics.
#+begin_src  emacs-lisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

My theme
this will load up 2 different themes one for the terminal and one for the gui.
turns out that the emacs client works differently so this is not something that
I can use... still works tho
#+BEGIN_SRC emacs-lisp
(setq doom-theme (if (or (daemonp) (display-graphic-p))
                     'doom-horizon
                   'horizon))

(use-package! tao-theme ; messing around with tao
  :defer
  :config
  (setq tao-theme-use-sepia nil))

;; (setq doom-theme 'tao-yang)
#+end_src

*** Doom Dashboard :dashboard:

my splash image can be found [[https://github.com/jeetelongname/doom-banners ][here]]
#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image "~/code/other/doom-banners/splashes/emacs/emacs-gnu-logo.png")
#+END_SRC

A futile reminder to get back to work
#+begin_src emacs-lisp
(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Get back to work")))
#+end_src

This is again stolen from Tecosaur. All it does is insert a little message from
a couple of online apis.
#+begin_src emacs-lisp
(defvar phrase-api-url
  (nth (random 3)
       '(("https://corporatebs-generator.sameerkumar.website/" :phrase)
         ("https://useless-facts.sameerkumar.website/api" :data)
         ("https://dev-excuses-api.herokuapp.com/" :text))))

(defmacro phrase-generate-callback (token &optional format-fn ignore-read-only callback buffer-name)
  `(lambda (status)
     (unless (plist-get status :error)
       (goto-char url-http-end-of-headers)
       (let ((phrase (plist-get (json-parse-buffer :object-type 'plist) (cadr phrase-api-url)))
             (inhibit-read-only ,(when (eval ignore-read-only) t)))
         (setq phrase-last (cons phrase (float-time)))
         (with-current-buffer ,(or (eval buffer-name) (buffer-name (current-buffer)))
           (save-excursion
             (goto-char (point-min))
             (when (search-forward ,token nil t)
               (with-silent-modifications
                 (replace-match "")
                 (insert ,(if format-fn format-fn 'phrase)))))
           ,callback)))))

(defvar phrase-last nil)
(defvar phrase-timeout 5)

(defmacro phrase-insert-async (&optional format-fn token ignore-read-only callback buffer-name)
  `(let ((inhibit-message t))
     (if (and phrase-last
              (> phrase-timeout (- (float-time) (cdr phrase-last))))
         (let ((phrase (car phrase-last)))
           ,(if format-fn format-fn 'phrase))
       (url-retrieve (car phrase-api-url)
                     (phrase-generate-callback ,(or token "\ufeff") ,format-fn ,ignore-read-only ,callback ,buffer-name))
       ;; For reference, \ufeff = Zero-width no-break space / BOM
       ,(or token "\ufeff"))))

(defun doom-dashboard-phrase ()
  (phrase-insert-async
   (progn
     (setq-local phrase-position (point))
     (mapconcat
      (lambda (line)
        (+doom-dashboard--center
         +doom-dashboard--width
         (with-temp-buffer
           (insert-text-button
            line
            'action
            (lambda (_)
              (setq phrase-last nil)
              (+doom-dashboard-reload t))
            'face 'doom-dashboard-menu-title
            'mouse-face 'doom-dashboard-menu-title
            'help-echo "Random phrase"
            'follow-link t)
           (buffer-string))))
      (split-string
       (with-temp-buffer
         (insert phrase)
         (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
         (fill-region (point-min) (point-max))
         (buffer-string))
       "\n")
      "\n"))
   nil t
   (progn
     (goto-char phrase-position)
     (forward-whitespace 1))
   +doom-dashboard-name))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (doom-dashboard-phrase)
   "\n"))
#+end_src

I removed the helpful menu. I only use it for.. nothing. lets make it C L E A N
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src
*** Modeline :modeline:
My modeline does a lot...
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'auto
        doom-modeline-height 30
        doom-modeline-icon 't
        doom-modeline-modal-icon 'nil
        doom-modeline-env-version t
        doom-modeline-buffer-modification-icon t
        doom-modeline-enable-word-count t
        doom-modeline-continuous-word-count-modes '(text-mode)
        doom-modeline-icon (display-graphic-p)
        doom-modeline-persp-name t
        doom-modeline-persp-icon t
        doom-modeline-github t
        doom-modeline-mu4e t))
#+END_SRC
This was all for a little padding. I could remove the stuff I don't need but
whats the fun in that?

#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
    '(objed-state misc-info vcs persp-name grip irc mu4e github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process checker " " bar " ")))
#+end_src

I stole this from @tecosaur Its frankly a great addition (this is a theme
throughout @tecosaurs config)
As we expect that the encoding is UTF-8 we remove it from the modeline untill we
get something that is not normal
#+BEGIN_SRC emacs-lisp

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook! 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC

the persp name was too dark for my liking
#+begin_src emacs-lisp
(custom-set-faces! `(doom-modeline-persp-name :foreground ,(doom-color 'red) :weight bold )
  `(doom-modeline-buffer-modified   :foreground ,(doom-color 'orange))
  `(doom-modeline-buffer-major-mode :foreground ,(doom-color 'blue)))
#+end_src

*** Treemacs :treemacs:sidebars:
this provides a vscode like sidebar. I actually use dired a lot more but I guess
its still useful for presentation's (dired sidebar is actually all I need)
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (setq +treemacs-git-mode 'extended
        treemacs-width 30))
#+END_SRC
*** Workspaces :workspaces:
This hot little number shows the workspaces whenever =SPC TAB= is hit. it makes
 =SPC TAB TAB= redundant. I then remap it too something a little more useful

 Thanks too @igorlamedia for it
#+begin_src emacs-lisp
(defadvice! rigor/which-key-show-workspace (orig-fun &rest pages-obj)
  "Show my workspaces in the echo thingy"
  :around #'which-key--process-page
  (let ((out (apply orig-fun pages-obj))
        (prefix-title (which-key--pages-prefix-title (car pages-obj))))
    (if (not (string-equal prefix-title "workspace"))
        out
      (cons (car out)
            (lambda ()
              (funcall (cdr out))
              (which-key--echo (concat (current-message) " " (+workspace--tabline))))))))

(map! :leader "TAB TAB" nil
      :leader "TAB TAB" #'+workspace/switch-to)
#+end_src
** tools :tools:
*** eval :eval:
I did not like the overlay as its greyed self so I picked something that would
stick out a little more
#+begin_src emacs-lisp
(custom-set-faces! `(eros-result-overlay-face
                     :foreground ,(doom-color 'violet)))
#+end_src

#+begin_src emacs-lisp
(after! eros
  (setq eros-eval-result-prefix "->  "))
#+end_src
*** lsp :lsp:
file watchers crash emacs. I never know what they do anyway
#+begin_src emacs-lisp
(setq lsp-enable-file-watchers nil)
#+end_src
*** pdf :pdf:
custom modeline for pdf files stolen from tecosaur and hopefully it will become
a default

#+begin_src emacs-lisp
(after! (pdf-tools doom-modeline)
  (doom-modeline-def-segment pdf-icon
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (doom-modeline-def-segment buffer-name
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (concat " P"
                  (number-to-string (eval `(pdf-view-current-page)))
                  (propertize (concat "/" (number-to-string (pdf-cache-number-of-pages))) 'face 'doom-modeline-buffer-minor-mode))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number matches pdf-pages pdf-icon buffer-name)
    '(misc-info major-mode process vcs))

  (defun doom-set-pdf-modeline-h ()
    "sets the pdf modeline"
    (doom-modeline-set-modeline 'pdf))

  (add-hook! 'pdf-view-mode-hook 'doom-set-pdf-modeline-h))
  #+end_src

*** tmux :tmux:
Sadly I can't live in emacs entirely. I have to use an outside terminal
this just makes it a little easier to orchestrate  my life in emacs
#+begin_src emacs-lisp
(after! evil
  (evil-ex-define-cmd "run" #'+tmux:run))
#+end_src
** emacs :emacs:
*** dired :dired:
If I open 2 instances of dired in two different locations then move/copy/symlink
a file. dired will point the move to the other location
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

I don't need all the file information all the time. thus I hide it by default
I may configure it too show some but not all (like the date)

#+begin_quote
Do note you can use =(= to toggle the information
#+end_quote

#+begin_src emacs-lisp
(add-hook! 'dired-mode-hook #'dired-hide-details-mode)
#+end_src
** term :term:
*** eshell :eshell:
eshell is a repl like shell. it works like a shell but you can use elisp in line
and it does not handle tui apps (like htop) usually defering to ~ansi-term~
#+begin_src emacs-lisp
(set-eshell-alias!
 "cls" "clear") ; this is what I use in my regular shell
#+end_src
** checkers :checkers:
*** spell :spell:
This readds the functionality of spelling on =return=
#+begin_src emacs-lisp
(map! (:after spell-fu
       (:map override ;; HACK spell-fu does not define a modemap
        :n [return]
        (cmds! (memq 'spell-fu-incorrect-face (face-at-point nil t))
               #'+spell/correct))))
#+end_src

** lang :lang:
*** TODO Org :org:
Org mode. our favorite plain text markup format! these are my configurations for
it
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org-notes/")
(after! org
  (setq org-agenda-files (mapcar
                          (lambda (x)
                            (concat org-directory x))
                          '("tasks.org" "blog-ideas.org" "hitlist.org")) ;; FIXME make it more specific
        org-hide-emphasis-markers t)

  (when (featurep! :lang org +pretty) ;; I used to use the +pretty flag but I now don't thus the `when'
    (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")
          org-superstar-headline-bullets-list '("⁕" "܅" "⁖" "⁘" "⁙" "⁜"))))
#+end_src

As org has a lot of subheading's I wanted to tweak stuff ever so slightly thus
here we are. do note that I have copied all of the foreground info over that
because the ~inherit~ value (setter?, key? idk) did not exist until I looked it
up it would have looked like ~..:inherit outline-x~ where x is the level of the
heading you want to change. This just locks me into the horizon colour scheme
but there are worst things. The better way would be to change ~outline-x~
directly
#+begin_src emacs-lisp
(custom-set-faces!
  `(org-date :foreground ,(doom-color 'violet))
  '(org-document-title :height 1.75 :weight bold)
  `(org-level-1 :foreground ,(doom-color 'blue) :height 1.3 :weight normal)
  `(org-level-2 :foreground ,(doom-color 'grey) :height 1.1 :weight normal)
  `(org-level-3 :foreground ,(doom-color 'violet) :height 1.0 :weight normal)
  `(org-level-4 :foreground ,(doom-color 'cyan)   :height 1.0 :weight normal)
  `(org-level-5 :foreground ,(doom-color 'grey) :weight normal)
  `(org-level-6 :foreground ,(doom-color 'blue) :weight normal))
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(after! org-capture
  (setq org-capture-templates
        '(("x" "Note" entry (file+olp+datetree "journal.org") "**** %T %?" :prepend t :kill-buffer t)
          ("t" "Task" entry (file+headline "tasks.org" "Inbox") "**** TODO %U %?\n%i" :prepend t :kill-buffer t)
          ("b" "Blog" entry (file+headline "blog-ideas.org" "Ideas") "**** TODO  %?\n%i" :prepend t :kill-buffer t)
          ("U" "UTCR" entry (file+headline "UTCR-TODO.org" "Tasks") "**** TODO %?\n%i" :prepend t :kill-buffer t))))
#+END_SRC


Below you will see a configuration for roam and journal. The reason I have both
is because I make 2 kinds of notes. one is for my head (which are linear) and
the other is for my school (which are non linear) roam has been a god sent for
note taking while journal has been a god sent for just getting my thoughts out
on paper I recommend both
**** Roam
#+begin_src emacs-lisp
(setq org-roam-directory (concat org-directory "roam/")
      org-roam-db-location (concat org-roam-directory ".org-roam.db"))
#+end_src
**** Journal
I don't need people snooping into my thoughts
#+begin_src emacs-lisp
(after! org-journal
  (setq org-journal-enable-encryption t
        org-journal-encrypt-journal t))
#+end_src

**** TODO org super agenda
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! origami)
(package! org-super-agenda)
#+END_SRC

#+begin_src emacs-lisp
(use-package! org-super-agenda
  :defer t
  :config
  (setq org-super-agenda-groups
         '(;; Each group has an implicit boolean OR operator between its selectors.
           (:name "Today"  ; Optionally specify section name
            :time-grid t  ; Items that appear on the time grid
            :todo "TODO")  ; Items that have this TODO keyword
           (:name "Important"
            ;; Single arguments given alon
            :tag "bills"
            :priority "A")
           ;; Groups supply their own section names when none are given
           (:todo "WAITING" :order 8)  ; Set order of this section
           (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
            ;; Show this group at the end of the agenda (since it has the
            ;; highest number). If you specified this group last, items
            ;; with these todo keywords that e.g. have priority A would be
            ;; displayed in that group instead, because items are grouped
            ;; out in the order the groups are listed.
            :order 9    )
           (:priority<= "B"
            ;; Show this section after "Today" and "Important", becaus  e
            ;; their order is unspecified, defaulting to 0. Sections
            ;; are displayed lowest-number-first.
            :order 1))
         org-agenda-start-day "0d"
         org-agenda-span 1))

#+end_src

*** DEPRECATED Go :go:
I have not written much go (at all)
Go and lsp have not been behaving like they should. the file watchers have been
misbehaving and now they have been disabled for go mode. That fixes the issue
but means lsp will not watch files in the workspace (a small price to pay imo)
#+BEGIN_SRC emacs-lisp
(after! go-mode ;; I have stopped using ligatures so this is not useful to me but it can be to you!
  (when (featurep! :ui ligatures)
    (set-ligatures! 'go-mode
                    :def "func"
                    :true "true" :false "false"
                    :int "int" :str "string"
                    :float "float" :bool "bool"
                    :for "for"
                    :return "return" )))

(setq-hook! 'go-mode-hook
  lsp-enable-file-watchers nil)
#+END_SRC

*** haskell
I have been pretty lazy when it comes to learning haskell
#+begin_src emacs-lisp
(after! lsp-haskell
  (setq lsp-haskell-formatting-provider "ormolu"))
#+end_src

*** Python :python:
Python is great is it not 🐍
#+BEGIN_SRC emacs-lisp
(setq! +python-ipython-command '("ipython3" "-i" "--simple-prompt" "--no-color-info"))
(set-repl-handler! 'python-mode #'+python/open-ipython-repl)
#+END_SRC

*** LaTeX :LaTeX:
#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(pdf-tools zathura)) ;; don't be going to those filthy third party apps
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map! :map cdlatex-mode-map
      :i "TAB" #'cdlatex-tab)
#+END_SRC

*** Web :web:
I just find the tidy formatter indent functionality annoying and redundant. so
I changed it
#+begin_src emacs-lisp
(setenv "HTML_TIDY" (expand-file-name "tidy.conf" doom-private-dir))
(setq +format-on-save-enabled-modes
      '(not web-mode))
#+end_src

Why leave emacs too compile sass?  TODO take an input and output dir
#+begin_src emacs-lisp :tangle autoload.el
(defun yeet/scss-compile (watch)
  "Get sass compiling my scss files."
  (start-process-shell-command
   "sass-compile" "*sass-compile-log*"
   (concat "sass "
           (if watch "--watch " " ")
           (concat (projectile-acquire-root) "css/scss") ":"
           (concat (projectile-acquire-root) "css" )
           " --no-color")))

;;;###autoload
(defun yeet/scss-build ()
  "Build Scss files in directory."
  (interactive)
  (yeet/scss-compile nil)
  (message "SCSS Compiled!"))

;;;###autoload
(defun yeet/scss-start ()
  "Watch Scss file in directory."
  (interactive)
  (yeet/scss-compile t))

;;;###autoload
(defun yeet/scss-stop ()
  "Kill any current scss processes"
  (interactive)
  (delete-process "sass-compile")
  (message "Sass process killed"))

#+end_src

#+RESULTS:
: yeet/scss-stop

#+begin_src emacs-lisp
(map! (:map 'scss-mode-map
       :localleader
       "b" nil
       (:prefix ("s" . "sass")
        "b" #'yeet/scss-build
        "c" #'yeet/scss-start
        "C" #'yeet/scss-stop)))
#+end_src
TODO caddy integration
**** css
I use sass and sadly the css-ls does not really work that well. I am going to
stick with the lsp less life for css
#+begin_src emacs-lisp
(remove-hook! '(css-mode-local-vars-hook
                scss-mode-local-vars-hook
                sass-mode-local-vars-hook
                less-css-mode-local-vars-hook)
  #'lsp!)
#+end_src
** email :email:
*** mu4e :mu4e:
Whats better than email? email in emacs! mu4e has been fine for me so I dont
think I will be switching to notmuch or what notj

Setting my email using ~set-email-acount~. its a simple affair If you are stuck
on the folders remember that they come from what you set in your [[https://github.com/jeetelongname/dotfiles/blob/master/mail/.mbsyncrc#L31][mail fetcher config]]
#+BEGIN_SRC emacs-lisp
(set-email-account! "gmail"
                    '((mu4e-sent-folder       . "/gmail/\[Gmail\]/Sent Mail")
                      (mu4e-drafts-folder     . "/gmail/\[Gmail\]/Drafts")
                      (mu4e-trash-folder      . "/gmail/\[Gmail\]/Trash")
                      (mu4e-refile-folder     . "/gmail/\[Gmail\]/All Mail")
                      (smtpmail-smtp-user     . "jeetelongname@gmail.com"))t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 25))
#+END_SRC

I use msmtp to send my mail as its a little faster and has room for expansion
#+begin_src emacs-lisp
(setq sendmail-program (executable-find "msmtp")
      send-mail-function #'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function #'message-send-mail-with-sendmail)
#+end_src

Adding some keybinding under local-leader. this should make it a little easier to
do mail stuff. I do like =C-c C-c= to send tho
#+begin_src emacs-lisp
(map! (:map org-msg-edit-mode-map
       :n "<tab>" #'org-msg-tab
       :localleader
       (:prefix "m"
        "k" #'org-msg-edit-kill-buffer
        "s" #'message-goto-subject
        "b" #'org-msg-goto-body
        "a" #'org-msg-attach)))
#+end_src

These are the settings for org-msg I may switch them to a snippet tho as I can
toggle the kind of signature I want to use then
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq
   ;; org-msg-default-alternatives '(html)
   org-msg-greeting-fmt "\nHi *%s*,\n\n"
   org-msg-signature "\nRegards,
 ,#+begin_signature
 -- *Jeetaditya Chatterjee* \\\\
 /Sent using my text editor/
 ,#+end_signature"))
#+END_SRC

I don't like the default replied face
#+begin_src emacs-lisp
(custom-set-faces! `(mu4e-replied-face :foreground ,(doom-color 'red) :inherit font-lock-builtin-face))
#+end_src

I update my mail when I feel like it so this is a little redundant for me
#+begin_src emacs-lisp :tangle packages.el
(package! mu4e-alert :disable t)
#+end_src
** App :app:
*** irc :irc:
I have a beard and I do like wasting time...
#+begin_src emacs-lisp
(after! circe
  (set-irc-server! "irc.eu.libera.chat"
                   '(:tls t
                     :port 6697
                     :nick "jeetelongname"
                     :sasl-username ,"jeetelongname"
                     :sasl-password (+pass-get-secret "social/freenode")
                     :channels ("#emacs" "#haskell"))))
#+end_src
*** rss :rss:
Elfeed is great. I just need more blogs
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@3-week-ago -fun") ;; /they post so much/

  (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org"))) ;; +org
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)) ; update on entry
#+END_SRC

There have been times where I wanted to share a link to an interesting blog or a
comic that made me laugh. this just automated that process
#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun yeet/elfeed-copy-link ()
  "Copy current link to clipboard for easy sharing"
  (interactive)
  (let ((link (elfeed-entry-link elfeed-show-entry)))
    (when link
      (kill-new link)
      (message "Copied %s to clipboard" link))))

;; not actually useful as you can just use =title to filter by title
;;;###autoload
(defun yeet/search-feeds-by-title (feed-title)
  (interactive (list (completing-read "Select Feed" (let (feed-titles)
                                                (dolist (feed elfeed-feeds feed-titles)
                                                  (push (cons (elfeed-feed-title (elfeed-entry-feed (car (elfeed-feed-entries (car feed)))))
                                                              (car feed))
                                                        feed-titles))))))
  (message "%s"  feed-title))

#+end_src

#+begin_src emacs-lisp
(map! (:map elfeed-show-mode-map
       :n "gc" nil
       :n "gc" #'yeet/elfeed-copy-link))
#+end_src

*** everywhere :everywhere:
I prefer to write in the language that is going to be posted so markdown mode
makes more sense to be the default (which is org)
#+begin_src emacs-lisp
(after! emacs-everywhere
  (add-hook! 'emacs-everywhere-init-hooks 'markdown-mode)
  (remove-hook! 'emacs-everywhere-init-hooks 'org-mode))
#+end_src

* Epilogue
And that was my config! I hope you liked it! If you did not then you can make an
[[https://github.com/jeetelongname/.doom/issues][issue]] and if you just want to say I suck then i guess you can use that for that
too. I guess this is it for me... I am going back to bed
